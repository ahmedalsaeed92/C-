#include <iostream>

using namespace std;
// Astar.cpp
// http://en.wikipedia.org/wiki/A*
// Compiler: Dev-C++ 4.9.9.2
// FB - 201012256
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glx.h>
#include <iostream>
#include <iomanip>
#include <queue>
#include <string>
#include <math.h>
#include <ctime>

#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <sstream>
#include <ctime> 
#include <math.h>
#include <cmath>
#include <fstream>
#define PI 3.14159265


const int n = 60; // horizontal size of the grid    (x-axis)
const int m = 60; // vertical size size of the grid (y-axis)
static int grid[n][m];
static int closed_nodes_grid[n][m]; // grid of closed (tried-out) nodes
static int open_nodes_grid[n][m]; // grid of open (not-yet-tried) nodes
static int dir_grid[n][m]; // grid of directions
const int dir=8; // number of possible directions to go at any position
// if dir==4
//static int dx[dir]={1, 0, -1, 0};
//static int dy[dir]={0, 1, 0, -1};
// if dir==8
static int dx[dir]={1, 1, 0, -1, -1, -1, 0, 1};
static int dy[dir]={0, 1, 1, 1, 0, -1, -1, -1};

static int rover_path_ptr = 0;
int scale = 1;
//----------------------------------

class node
{
    // current position
    int xPos;
    int yPos;
    // total distance already travelled to reach the node
    int level;
    // priority=level+remaining distance estimate
    int priority;  // smaller: higher priority

    public:
        node(int xp, int yp, int d, int p) 
            {xPos=xp; yPos=yp; level=d; priority=p;}
    
        int getxPos() const {return xPos;}
        int getyPos() const {return yPos;}
        int getLevel() const {return level;}
        int getPriority() const {return priority;}

        void updatePriority(const int & xDest, const int & yDest)
        {
             priority=level+estimate(xDest, yDest)*10; //A*
        }

        // give better priority to going strait instead of diagonally
        void nextLevel(const int & i) // i: direction
        {
             level+=(dir==8?(i%2==0?10:14):10);
        }
        
        // Estimation function for the remaining distance to the goal.
        const int & estimate(const int & xDest, const int & yDest) const
        {
            static int xd, yd, d;
            xd=xDest-xPos;
            yd=yDest-yPos;         

            // Euclidian Distance
            d=static_cast<int>(sqrt(xd*xd+yd*yd));

            // Manhattan distance
            //d=abs(xd)+abs(yd);
            
            // Chebyshev distance
            //d=max(abs(xd), abs(yd));

            return(d);
        }
};

// Determine priority (in the priority queue)
bool operator<(const node & a, const node & b)
{
  return a.getPriority() > b.getPriority();
}

// A-star algorithm.
// The route returned is a string of direction digits.
string pathFind( const int & xStart, const int & yStart, 
                 const int & xFinish, const int & yFinish )
{
    static priority_queue<node> pq[2]; // list of open (not-yet-tried) nodes
    static int pqi; // pq index
    static node* n0;
    static node* m0;
    static int i, j, x, y, xdx, ydy;
    static char c;
    pqi=0;

    // reset the node grids
    for(y=0;y<m;y++)
    {
        for(x=0;x<n;x++)
        {
            closed_nodes_grid[x][y]=0;
            open_nodes_grid[x][y]=0;
        }
    }

    // create the start node and push into list of open nodes
    n0=new node(xStart, yStart, 0, 0);
    n0->updatePriority(xFinish, yFinish);
    pq[pqi].push(*n0);
    open_nodes_grid[x][y]=n0->getPriority(); // mark it on the open nodes grid

    // A* search
    while(!pq[pqi].empty())
    {
        // get the current node w/ the highest priority
        // from the list of open nodes
        n0=new node( pq[pqi].top().getxPos(), pq[pqi].top().getyPos(), 
                     pq[pqi].top().getLevel(), pq[pqi].top().getPriority());

        x=n0->getxPos(); y=n0->getyPos();

        pq[pqi].pop(); // remove the node from the open list
        open_nodes_grid[x][y]=0;
        // mark it on the closed nodes grid
        closed_nodes_grid[x][y]=1;

        // quit searching when the goal state is reached
        //if((*n0).estimate(xFinish, yFinish) == 0)
        if(x==xFinish && y==yFinish) 
        {
            // generate the path from finish to start
            // by following the directions
            string path="";
            while(!(x==xStart && y==yStart))
            {
                j=dir_grid[x][y];
                c='0'+(j+dir/2)%dir;
                path=c+path;
                x+=dx[j];
                y+=dy[j];
            }

            // garbage collection
            delete n0;
            // empty the leftover nodes
            while(!pq[pqi].empty()) pq[pqi].pop();           
            return path;
        }

        // generate moves (child nodes) in all possible directions
        for(i=0;i<dir;i++)
        {
            xdx=x+dx[i]; ydy=y+dy[i];

            if(!(xdx<0 || xdx>n-1 || ydy<0 || ydy>m-1 || grid[xdx][ydy]==1 
                || closed_nodes_grid[xdx][ydy]==1))
            {
                // generate a child node
                m0=new node( xdx, ydy, n0->getLevel(), 
                             n0->getPriority());
                m0->nextLevel(i);
                m0->updatePriority(xFinish, yFinish);

                // if it is not in the open list then add into that
                if(open_nodes_grid[xdx][ydy]==0)
                {
                    open_nodes_grid[xdx][ydy]=m0->getPriority();
                    pq[pqi].push(*m0);
                    // mark its parent node direction
                    dir_grid[xdx][ydy]=(i+dir/2)%dir;
                }
                else if(open_nodes_grid[xdx][ydy]>m0->getPriority())
                {
                    // update the priority info
                    open_nodes_grid[xdx][ydy]=m0->getPriority();
                    // update the parent direction info
                    dir_grid[xdx][ydy]=(i+dir/2)%dir;

                    // replace the node
                    // by emptying one pq to the other one
                    // except the node to be replaced will be ignored
                    // and the new node will be pushed in instead
                    while(!(pq[pqi].top().getxPos()==xdx && 
                           pq[pqi].top().getyPos()==ydy))
                    {                
                        pq[1-pqi].push(pq[pqi].top());
                        pq[pqi].pop();       
                    }
                    pq[pqi].pop(); // remove the wanted node
                    
                    // empty the larger size pq to the smaller one
                    if(pq[pqi].size()>pq[1-pqi].size()) pqi=1-pqi;
                    while(!pq[pqi].empty())
                    {                
                        pq[1-pqi].push(pq[pqi].top());
                        pq[pqi].pop();       
                    }
                    pqi=1-pqi;
                    pq[pqi].push(*m0); // add the better node instead
                }
                else delete m0; // garbage collection
            }
        }
        delete n0; // garbage collection
    }
    
    if(grid[xFinish][yFinish] == 1)
       cout << "#######  Final Position is incorrect  #######" << endl;
    return ""; // no route found
}

void DrawSquare( int iSize )
{
	for ( int i = 0; i < iSize; i ++ )
	{
		for ( int j = 0; j < iSize; j ++ )
			grid[i][j]=1;
	}
}
/*
void printPath()
{
     for(int i = 0; i < rover_path_ptr; i++)
     {
          cout << "Point no." << i << " -- (" << rover_path[i].x <<"," << rover_path[i].y << ")" << endl;
     }
}
*/
 void Draw_Path(int xA, int yA, int xB, int yB, string route)
{
    rover_path_ptr = 0;
   
    if(route.length()>0)
    {
        int j; char c;
        int x = xA;
        int y = yA;
        
        grid[x][y] = 2;
        
        for(int i=0; i < route.length() -1 ;i++)
        {
            c =route.at(i);
            j=atoi(&c); 
            x=x+dx[j];
            y=y+dy[j];
            grid[x][y]=3;
            /*
            rover_path[rover_path_ptr].x = x/10.0; // Here we store the path into an array of points
            rover_path[rover_path_ptr].y = y/10.0;
            rover_path_ptr++;*/
        }
         
        grid[x][y]=4;
        
        // display the grid with the route
        for(int y = m; y >= 0 ;y--)
        {
            for(int x=0;x<n;x++)
            {    if(grid[x][y] == 0)
                 {
                    cout<<"- ";
                   
                 }
                else if(grid[x][y] == 1)
                {
                    cout<<"O "; //obstacle
                    
                }
                else if(grid[x][y] == 2)
                {
                    cout<<"S "; //start
                
                }
                else if(grid[x][y] == 3)
                {
                         cout<<"# "; //route 
                         
                 }
                else if(grid[x][y] == 4)
                {
                    cout<<"F "; //finish
                    
                }
  
             }
            
            cout<<endl;
        }
    }
     cout << "________Path Found Successfully_________" << endl;
}

void Draw_Obstacles(int x, int y, int xSize, int ySize)
{
    for ( int i = x; i < x + xSize; i ++ )
	{
		for ( int j = y; j < y + ySize; j ++ )
			grid[i][j] = 1;
	}
}

void Draw_Empty_Grid()
{
   
   for(int y=0;y<m;y++)
    {
        for(int x=0;x<n;x++) 
           grid[x][y]=0;
    }
    cout << "_____Empty Grid Was Done!______"<< endl;
}

int main()
{
    int xA, yA, xB, yB;
    double xdiff, ydiff;
//    cout << "Enter Start Point coordinates (x,y)" << endl; cin >> xA >> yA;
    cout << "Enter End Point coordinates (x,y)" << endl; 
    cin >> xB >> yB;
    xA = yA = 50;
//    xB = 8 ; yB = 7;
    cout << "Start: " << xA << "," << yA << endl;
    cout << "Finish: " << xB << "," << yB << endl; 
   
    Draw_Empty_Grid();
    Draw_Obstacles(1,1,8,8);
    string route = pathFind(xA, yA, xB, yB);     
    Draw_Path(xA, yA, xB, yB, route);
  //  printPath();
   
   return 0;
}
